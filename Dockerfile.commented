# =============================================================================
# Next.js + WebSocket 双服务Docker镜像构建文件
# 
# 修改历史：
# - 从 node:20-alpine 切换到 node:20-slim 解决网络连接问题
# - 适配 Alpine Linux → Debian 的包管理命令变更
# =============================================================================

# -----------------------------------------------------------------------------
# 阶段1：基础镜像 (Base Stage)
# -----------------------------------------------------------------------------
FROM node:20-slim AS base
# 选择说明：
# - node:20-slim：基于Debian的轻量级Node.js镜像
# - 相比Alpine：更好的glibc兼容性，减少native模块问题
# - 相比full镜像：更小的体积，更快的下载速度

# -----------------------------------------------------------------------------
# 阶段2：依赖安装 (Dependencies Stage)
# -----------------------------------------------------------------------------
FROM base AS deps
# 安装系统级依赖包
RUN apt-get update && apt-get install -y --no-install-recommends \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*
# 包说明：
# - ca-certificates：SSL/TLS证书包，确保HTTPS连接正常
# - --no-install-recommends：仅安装必需依赖，减小镜像体积
# - rm -rf /var/lib/apt/lists/*：清理包管理器缓存

WORKDIR /app

# 复制包管理文件
COPY package.json yarn.lock ./

# 设置环境变量跳过Husky安装（Docker环境不需要Git hooks）
ENV HUSKY=0
# 配置yarn使用国内镜像源，加速依赖下载
RUN yarn config set registry 'https://registry.npmmirror.com/'
# 安装生产和开发依赖
RUN yarn install

# -----------------------------------------------------------------------------
# 阶段3：应用构建 (Builder Stage)
# -----------------------------------------------------------------------------
FROM base AS builder
# 安装构建时需要的工具
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    && rm -rf /var/lib/apt/lists/*
# 包说明：
# - git：某些npm包需要从Git仓库下载源码

# 构建时环境变量（占位符，实际值在运行时提供）
ENV OPENAI_API_KEY=""
ENV GOOGLE_API_KEY=""
ENV CODE=""

WORKDIR /app
# 从deps阶段复制已安装的node_modules
COPY --from=deps /app/node_modules ./node_modules
# 复制源代码
COPY . .
# 复制WebSocket服务器代码
COPY websocket-server ./websocket-server

# 执行Next.js构建
# 注意：next.config.mjs中配置了 output: 'standalone'
# 这会在 .next/standalone 目录生成独立的server.js文件
RUN yarn build

# -----------------------------------------------------------------------------
# 阶段4：运行环境 (Runtime Stage)
# -----------------------------------------------------------------------------
FROM base AS runner
WORKDIR /app

# 安装运行时需要的工具
RUN apt-get update && apt-get install -y --no-install-recommends \
    proxychains4 \
    && rm -rf /var/lib/apt/lists/*
# 包说明：
# - proxychains4：网络代理工具，支持通过代理访问外部服务

# 运行时环境变量配置
ENV PROXY_URL=""                           # 代理服务器地址（可选）
ENV OPENAI_API_KEY=""                      # OpenAI API密钥
ENV GOOGLE_API_KEY=""                      # Google API密钥
ENV CODE=""                                # 应用访问密码
ENV ENABLE_MCP=""                          # MCP功能开关
ENV NEXT_PUBLIC_AZURE_SPEECH_KEY=""        # Azure语音服务密钥（客户端可见）
ENV NEXT_PUBLIC_AZURE_SPEECH_REGION=""     # Azure语音服务区域（客户端可见）

# 数据和服务配置
ENV DB_PATH="/app/data/nextchat.db"        # SQLite数据库路径
ENV WS_PORT="8080"                         # WebSocket服务端口
ENV WS_HOST="0.0.0.0"                      # WebSocket服务绑定地址

# 复制构建产物
COPY --from=builder /app/public ./public                    # 静态资源
COPY --from=builder /app/.next/standalone ./                # Next.js独立服务器
COPY --from=builder /app/.next/static ./.next/static        # Next.js静态资源
COPY --from=builder /app/.next/server ./.next/server        # Next.js服务器组件

# 复制自定义服务
COPY --from=builder /app/websocket-server ./websocket-server              # WebSocket服务器
COPY --from=builder /app/scripts/start-services.js ./scripts/start-services.js  # 服务启动脚本

# 创建应用数据目录
RUN mkdir -p /app/app/mcp && chmod 777 /app/app/mcp
COPY --from=builder /app/app/mcp/mcp_config.default.json /app/app/mcp/mcp_config.json

RUN mkdir -p /app/data && chmod 755 /app/data

# 复制数据库初始化脚本
COPY --from=builder /app/app/db/*.sql /app/app/db/

# 暴露端口
EXPOSE 3000    # Next.js应用端口
EXPOSE 8080    # WebSocket服务端口

# 启动命令：支持代理模式和直连模式
CMD if [ -n "$PROXY_URL" ]; then \
    export HOSTNAME="0.0.0.0"; \
    protocol=$(echo $PROXY_URL | cut -d: -f1); \
    host=$(echo $PROXY_URL | cut -d/ -f3 | cut -d: -f1); \
    port=$(echo $PROXY_URL | cut -d: -f3); \
    conf=/etc/proxychains.conf; \
    echo "strict_chain" > $conf; \
    echo "proxy_dns" >> $conf; \
    echo "remote_dns_subnet 224" >> $conf; \
    echo "tcp_read_time_out 15000" >> $conf; \
    echo "tcp_connect_time_out 8000" >> $conf; \
    echo "localnet 127.0.0.0/255.0.0.0" >> $conf; \
    echo "localnet ::1/128" >> $conf; \
    echo "[ProxyList]" >> $conf; \
    echo "$protocol $host $port" >> $conf; \
    cat /etc/proxychains.conf; \
    proxychains -f $conf node scripts/start-services.js; \
    else \
    node scripts/start-services.js; \
    fi

# =============================================================================
# 启动说明：
# 
# 1. 检查是否配置了代理
# 2. 如果有代理：
#    - 解析代理URL
#    - 生成proxychains配置文件
#    - 通过代理启动服务
# 3. 如果无代理：
#    - 直接启动服务
# 
# start-services.js 会同时启动：
# - Next.js应用 (端口3000)：使用自动生成的server.js
# - WebSocket服务器 (端口8080)：自定义实现的实时通信服务
# ============================================================================= 